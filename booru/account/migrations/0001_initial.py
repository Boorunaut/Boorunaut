# Generated by Django 2.1.2 on 2018-11-13 21:21

import booru.managers
from django.conf import settings
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('slug', models.SlugField(blank=True, default='', max_length=250)),
                ('email_activated', models.BooleanField(default=False)),
                ('comments_locked', models.BooleanField(default=False)),
                ('about', models.CharField(blank=True, max_length=2500)),
                ('safe_only', models.BooleanField(default=True)),
                ('show_comments', models.BooleanField(default=True)),
                ('tag_blacklist', models.CharField(blank=True, max_length=2500)),
                ('is_deleted', models.BooleanField(default=False)),
            ],
            options={
                'permissions': (('modify_profile', 'Can change values from all profiles.'),),
            },
            managers=[
                ('objects', booru.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Privilege',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, verbose_name='name')),
                ('codename', models.CharField(max_length=100, verbose_name='codename')),
            ],
            options={
                'verbose_name': 'privilege',
                'verbose_name_plural': 'privileges',
                'ordering': ['codename'],
            },
        ),
        migrations.CreateModel(
            name='Timeout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason', models.CharField(max_length=2500)),
                ('expiration', models.DateTimeField()),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='timeout_creator', to=settings.AUTH_USER_MODEL)),
                ('revoked', models.ManyToManyField(blank=True, help_text='Privileges revoked from this user.', related_name='revoked_privs', related_query_name='user', to='account.Privilege', verbose_name='privileges')),
                ('target_user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_timedout', to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
